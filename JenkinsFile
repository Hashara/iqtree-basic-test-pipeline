// jenkins file for the basic test pipeline
pipeline {
    agent any
    parameters {

        // bool for build
        booleanParam(defaultValue: true, description: 'Build the project?', name: 'BUILD')

        // following  are params for build pipeline
        string (defaultValue: 'master', description: 'Branch to build', name: 'BRANCH')
        string(name: 'NCI_ALIAS', defaultValue: 'nci_gadi', description: 'ssh alias, if you do not have one, create one')

        string(name: 'WORKING_DIR', defaultValue: '/scratch/dx61/sa0557/iqtree2/ci-cd', description: 'Working directory')

        // bool for building NN
        booleanParam(defaultValue: true, description: 'Run the NN?', name: 'NN')
        string(name: 'ONNX_NN', description: 'onnxruntime for NN (use 1.12 version)', defaultValue: '/scratch/dx61/sa0557/iqtree2/onnxruntime-linux-x64-1.12.1')

        booleanParam(defaultValue: true, description: 'Run the GPU?', name: 'GPU')
        string(name: 'ONNX_NN_GPU', description: 'onnxruntime for NN-CUDA (use 1.12 version)', defaultValue: '/scratch/dx61/sa0557/iqtree2/onnxruntime-linux-x64-gpu-1.12.1')


        // bool for config repo
        booleanParam(defaultValue: true, description: 'Clone the config repo?', name: 'CLONE_CONFIG_REPO')

        string (defaultValue: '/Users/u7826985/Projects/iqtree-pipelines/local_wd', description: 'Local working directory', name: 'LOCAL_WD')


        // bool for test
        booleanParam(defaultValue: true, description: 'Run with partition?', name: 'USE_PARTITION')
        booleanParam(defaultValue: false, description: 'Run with tree?', name: 'USE_TREE')

        // dataset name
        string (defaultValue: 'example', description: 'Dataset name in the config repo', name: 'DATASET')

        // test options
        string (defaultValue: 'TESTMERGEONLY', description: '-m option', name: 'M_OPTION')
        string (defaultValue: 'false', description: '--mset option', name: 'MSET_OPTION')
        string (defaultValue: 'false', description: '--mrate option', name: 'MRATE_OPTION')
        string (defaultValue: 'false', description: 'Other options', name: 'OTHER_OPTIONS')
        string(defaultValue: '1', name: 'N_ATTEMPT', description: 'Number of attempt')  // in the later stage convert this to int

        // unique output folder name
        string (defaultValue: 'unique-name', description: 'Output folder unique name', name: 'UNIQUE_FOLDER_NAME')

     }
     options {
             skipStagesAfterUnstable()
     }
     environment {
        IQTREE_GIT_URL = "https://github.com/iqtree/iqtree2.git"
        NCI_ALIAS = "${params.NCI_ALIAS}"
        WORKING_DIR = "${params.WORKING_DIR}"
        GIT_REPO = "iqtree2"
        BUILD_SCRIPTS = "${WORKING_DIR}/build-scripts"
        IQTREE_DIR = "${WORKING_DIR}/${GIT_REPO}"
        IQTREE_CONFIG_REPO = "https://github.com/Hashara/iqtree-test-config.git"
        IQTREE_CONFIG_DIR = "${WORKING_DIR}/iqtree-test-config"
        LOCAL_WD = "${params.LOCAL_WD}"
        CONFIG_REPO_DIR = "iqtree-test-config"
        IQTREE_CONFIG_REPO_LOCAL = "${WORKING_DIR}/${CONFIG_REPO_DIR}"
        DATASET_DIR = "${WORKING_DIR}/data"

        // params to env variables
        UNIQUE_FOLDER_NAME = "${params.UNIQUE_FOLDER_NAME}"
        N_ATTEMPT = "${params.N_ATTEMPT}"
        M_OPTION = "${params.M_OPTION}"
        MSET_OPTION = "${params.MSET_OPTION}"
        MRATE_OPTION = "${params.MRATE_OPTION}"
        OTHER_OPTIONS = "${params.OTHER_OPTIONS}"
        USE_PARTITION = "${params.USE_PARTITION}"
        USE_TREE = "${params.USE_TREE}"
        NN="${params.NN}"
        ONNX_NN="${params.ONNX_NN}"
        GPU="${params.GPU}"
        ONNX_NN_GPU="${params.ONNX_NN_GPU}"

        TEST_SCRIPTS_DIR = "${WORKING_DIR}/test_scripts"


    }
    stages {
        stage('Build') {
            steps {
                // if build is true then echo build
                script {
                    if (params.BUILD) {
                        echo 'Building..'
                        // trigger jenkins iqtree-build-pipeline
                        build job: 'iqtree-build-pipeline', parameters: [
                        string(name: 'BRANCH', value: BRANCH),
                        string(name: 'NCI_ALIAS', value: NCI_ALIAS),
                        string(name: 'WORKING_DIR', value: WORKING_DIR),
                        booleanParam(name: 'NN', value: NN),
                        string(name: 'ONNX_NN', value: ONNX_NN),
                        booleanParam(name: 'GPU', value: GPU),
                        string(name: 'ONNX_NN_GPU', value: ONNX_NN_GPU),


                        ]

                    }
                    else {
                        echo 'Skip build..'
                    }
                }
            }
        }
        stage ('Cloning config repo') {
            steps {
                script {
                    if (params.CLONE_CONFIG_REPO) {
                       echo "featching ${IQTREE_CONFIG_REPO}"
                       sh "mkdir -p ${LOCAL_WD}"
                       dir ("${LOCAL_WD}") {
                           git credentialsId: 'git-PAT', branch: 'master', url: "${IQTREE_CONFIG_REPO}"
                       }
                    }
                    else {
                        echo 'Skip cloning config repo..'
                    }


                }
            }

        }
        stage("reading config file") {
            steps {
                script {
                    echo "section: reading config file"

                    try {
                        def config = readYaml file: "${LOCAL_WD}/${DATASET}/data/configs.yaml"
                        echo "config: ${config}"

                        //remove existing data in the NCI
                        echo "removing existing data in NCI"
                        sh "ssh ${NCI_ALIAS} rm -rf ${DATASET_DIR}/*"

                        // copy dataset to remote working directory
                        echo "copying data files to NCI"
                        sh "scp -r ${LOCAL_WD}/${DATASET}/data/* ${NCI_ALIAS}:${DATASET_DIR}"

                        // read configs and assign to variables
                        env.ALIGNMENT = config['data']['data_files']['alignment']

                        //check partitions value is existing
                        if (config['data']['data_files']['partition']) {
                            env.PARTITIONS = config['data']['data_files']['partition']
                        }
                        else {
                            env.PARTITIONS = "false"
                        }

                        // check tree value is existing
                        if (config['data']['data_files']['tree']) {

                            env.TREE = config['data']['data_files']['tree']
                        }
                        else {
                            env.TREE = "false"
                        }

                        // create dynamic env variables
                        def N_ATTEMPT_INT = params.N_ATTEMPT.toInteger()
                        def envFileContent = """
#!/bin/bash
export NATTEMPT=${N_ATTEMPT_INT} # number of attempts
export M_OPTION=${M_OPTION} # MF/TESTMERGEONLY/TESTONLY ....
export MRATE_OPTION=${MRATE_OPTION} # -mrate option
export MSET_OPTION=${MSET_OPTION} # -mset option
export OTHER_OPTIONS=${OTHER_OPTIONS} # other options

export UNIQUE_FOLDER_NAME=${UNIQUE_FOLDER_NAME} # unique name for the output folder

# working directory
export WORKING_DIR="${WORKING_DIR}"


# data files
export ALIGNMENT=${ALIGNMENT}
export PARTITION=${PARTITIONS}
export TREE=${TREE}
export USE_PARTITION=${USE_PARTITION}
export USE_TREE=${USE_TREE}
export OUTPUT_DIR="${WORKING_DIR}/output-${UNIQUE_FOLDER_NAME}-${DATASET}"

mkdir -p ${WORKING_DIR}/output-${UNIQUE_FOLDER_NAME}-${DATASET}
                        """

                        // write env variables to a file
                        writeFile file: "helpers/${UNIQUE_FOLDER_NAME}_env.sh", text: envFileContent



                       //  copy env configs to the remote working directory
                        sh "scp -r helpers ${NCI_ALIAS}:${WORKING_DIR}"

                        // copy csv path to the remote working directory
                        sh "scp ${LOCAL_WD}/${DATASET}/csv/input.csv ${NCI_ALIAS}:${WORKING_DIR}"

                        // copy test scripts
                        sh "scp -r test_scripts ${NCI_ALIAS}:${WORKING_DIR}"

                        // give execution permission to test_scripts
                        sh "ssh ${NCI_ALIAS} chmod 777 ${WORKING_DIR}/test_scripts/*"


                    } catch (err) {
                        echo "Error reading config file: ${err}"
                    }



                }
            }
        }
        stage ("Test from script"){
            steps {
                script {
                    echo "section: Test from script"

                    echo "here is this${WORKING_DIR}"
                    def N_ATTEMPT_INT = params.N_ATTEMPT.toInteger()

                    sh """
                            ssh ${NCI_ALIAS} << EOF
                            source ${WORKING_DIR}/helpers/${UNIQUE_FOLDER_NAME}_env.sh
                            source ${WORKING_DIR}/helpers/create_env.sh

                            /bin/bash ${TEST_SCRIPTS_DIR}/testFactory.sh
                            exit
                            EOF
                        """
                }
            }
        }



    }
}
